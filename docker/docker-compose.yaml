services:
  controller-1:
    image: apache/kafka:latest
    container_name: controller-1
    restart: always
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    mem_limit: 512m
    networks:
      - dev_network

  controller-2:
    image: apache/kafka:latest
    container_name: controller-2
    restart: always
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    mem_limit: 512m
    networks:
      - dev_network

  controller-3:
    image: apache/kafka:latest
    container_name: controller-3
    restart: always
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    mem_limit: 512m
    networks:
      - dev_network

  broker-1:
    image: apache/kafka:latest
    container_name: broker-1
    restart: always
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    mem_limit: 512m
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - dev_network

  broker-2:
    image: apache/kafka:latest
    container_name: broker-2
    restart: always
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    mem_limit: 512m
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - dev_network

  broker-3:
    image: apache/kafka:latest
    container_name: broker-3
    restart: always
    ports:
      - 49092:9092
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-3:19092,PLAINTEXT_HOST://localhost:49092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    mem_limit: 512m
    depends_on:
      - controller-1
      - controller-2
      - controller-3
    networks:
      - dev_network
  ############## ELK ##############
  #  elasticsearch:
  #    build:
  #      context: ./elk/es
  #      dockerfile: Dockerfile
  #    image: custom-elasticsearch:7.17.25
  #    container_name: es
  #    hostname: es
  #    environment:
  #      - discovery.type=single-node
  #      - ES_JAVA_OPTS=-Xms512m -Xmx512m
  #      - TZ=Asia/Shanghai
  #    volumes:
  #      - ./elk/es/data:/usr/share/elasticsearch/data
  #    ports:
  #      - 9200:9200
  #      - 9300:9300
  #    ulimits:
  #      memlock:
  #        soft: -1
  #        hard: -1
  #    networks:
  #      - dev_network
  #  elasticsearch-head:
  #    build:
  #      context: ./elk/es-head
  #      dockerfile: Dockerfile
  #    image: custom-elasticsearch-head:5
  #    container_name: es-admin
  #    hostname: es-admin
  #    environment:
  #      - TZ=Asia/Shanghai
  #    ports:
  #      - 9100:9100
  #    networks:
  #      - dev_network
  #  logstash:
  #    build:
  #      context: ./elk/logstash
  #      dockerfile: Dockerfile
  #    image: custom-logstash:7.17.25
  #    container_name: logstash
  #    hostname: logstash
  #    environment:
  #      - TZ=Asia/Shanghai
  #    ports:
  #      - 5044:5044
  #      - 9600:9600
  #    networks:
  #      - dev_network
  #  kibana:
  #    image: kibana:7.17.25
  #    container_name: kibana
  #    hostname: kibana
  #    environment:
  #      - ELASTICSEARCH_HOSTS=http://es:9200
  #      - I18N_LOCALE=zh-CN
  #      - TZ=Asia/Shanghai
  #    ports:
  #      - 5601:5601
  #    networks:
  #      - dev_network
  ############## ELK END ##############

  zookeeper:
    image: zookeeper:3.9.3
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    mem_limit: 512m
    ports:
      - 2181:2181
    networks:
      - dev_network
  redis:
    image: redis:7.0.15
    container_name: redis
    hostname: redis
    restart: always
    mem_limit: 512m
    ports:
      - 6379:6379
    networks:
      - dev_network
  mysql:
    build:
      context: .
      dockerfile: ./mysql/Dockerfile
    container_name: mysql
    hostname: mysql
    privileged: true
    restart: always
    mem_limit: 512m
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --lower_case_table_names=1
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - TZ=Asia/Shanghai
      - SET_CONTAINER_TIMEZONE=true
      - CONTAINER_TIMEZONE=Asia/Shanghai
      - MYSQL_DATABASE=nacos
      - MYSQL_PASSWORD=nacos
      - MYSQL_USER=nacos
    ports:
      - '3306:3306'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - dev_network
#  open-webui:
#    image: ghcr.io/open-webui/open-webui:main
#    container_name: open-webui
#    hostname: open-webui
#    restart: always
#    mem_limit: 512m
#    ports:
#      - "3000:8080"
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    volumes:
#      - ./open-webui:/app/backend/data
#    networks:
#      - dev_network
#
#  mongodb:
#    image: 'mongo:8.0.3'
#    container_name: mongo
#    hostname: mongo
#    environment:
#      - 'MONGO_INITDB_DATABASE=smart'
#      - 'MONGO_INITDB_ROOT_PASSWORD=secret'
#      - 'MONGO_INITDB_ROOT_USERNAME=root'
#    ports:
#      - '27017:27017'

#  nacos:
#    image: nacos/nacos-server:v2.3.2
#    container_name: nacos
#    hostname: nacos
#    restart: always
#    ports:
#      - 8848:8848
#  rocketmq:
#    image: apache/rocketmq:5.1.4
#    container_name: rocketmq
#    hostname: rocketmq
#    restart: always
#    ports:
#      - 10911:10911
#      - 10909:10909
#      - 10912:10912
#      - 9876:9876
#  seata:
#    image: seataio/seata-server:2.0.0
#    container_name: seata
#    hostname: seata
#    restart: always
#    ports:
#      - 8091:8091
#      - 7091:7091


networks:
  dev_network:
    driver: bridge